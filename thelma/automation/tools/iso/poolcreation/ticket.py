"""
Trac tools dealing with pool stock sample creation tickets

AAB
"""
from thelma.automation.tools.iso.poolcreation.base \
    import StockSampleCreationLayout
from thelma.automation.tools.iso.poolcreation.execution \
    import StockSampleCreationExecutor
from thelma.automation.tools.iso.poolcreation.writer \
    import StockSampleCreationWorklistWriter
from thelma.automation.tools.iso.tracreporting import IsoStockTransferReporter
from thelma.automation.tools.writers import CsvColumnParameters
from thelma.automation.tools.writers import CsvWriter
from thelma.automation.tracbase import BaseTracTool
from thelma.automation.utils.base import VOLUME_CONVERSION_FACTOR
from thelma.automation.utils.base import add_list_map_element
from thelma.automation.utils.base import get_trimmed_string
from thelma.models.iso import StockSampleCreationIso
from thelma.models.liquidtransfer import ExecutedWorklist
from tractor import AttachmentWrapper

__docformat__ = 'reStructuredText en'

__all__ = ['_StockSampleCreationStockLogFileWriter',
           'StockSampleCreationStockTransferReporter']

class StockSampleCreationStockTransferReporter(IsoStockTransferReporter):
    """
    A special reporter for stock sample creation ISOs.

    **Return Value:** The log file as stream (arg 0) and comment (arg 1)s
    """
    EXECUTOR_CLS = StockSampleCreationExecutor

    def __init__(self, executor, **kw):
        """
        Constructor:

        :param executor: The executor tool (after run has been completed).
        :type executor: :class:`_LabIsoWriterExecutorTool`
        """
        IsoStockTransferReporter.__init__(self, executor=executor, **kw)

        #: The stock sample creation layout for this ISO.
        self.__ssc_layout = None

    def reset(self):
        IsoStockTransferReporter.reset(self)
        self.__ssc_layout = None

    def _fetch_executor_data(self):
        IsoStockTransferReporter._fetch_executor_data(self)
        self.__ssc_layout = self.executor.get_stock_sample_creation_layout()
        self._check_input_class('layout', self.__ssc_layout,
                                StockSampleCreationLayout)

    def _set_ticket_id(self):
        """
        The ticket ID is attached to the stock sample creation ISO.
        """
        self._ticket_number = self.executor.entity.ticket_number

    def _get_sample_type_str(self):
        return 'new pooled stock samples'

    def _get_rack_str(self):
        """
        The rack string looks different, we use new ISO stock rack
        (instead of the preparation plate).
        """
        rack = self.executor.entity.iso_stock_racks[0].rack
        rack_str = 'New pool stock rack: %s' % (rack.barcode)
        return rack_str

    def _get_log_file_writer(self):
        """
        For stock sample creation ISOs we use a special writer, the
        :class:`StockSampleCreationStockLogFileWriter`.
        """
        writer = _StockSampleCreationStockLogFileWriter(log=self.log,
                    stock_sample_creation_layout=self.__ssc_layout,
                    executed_worklists=self._executed_stock_worklists)
        return writer


class _StockSampleCreationStockLogFileWriter(CsvWriter):
    """
    Creates a log file after each pool creation stock transfer. The log
    file contains molecule design pools, molecule designs, stock tube barcodes
    and volumes and the barcode and positions in the target rack.

    **Return Value:** file stream (CSV format)
    """
    NAME = 'Stock Sample Creation Stock Transfer Log File Writer'

    #: The index for the molecule design pool ID column.
    POOL_INDEX = 0
    #: The header for the molecule design pool ID column.
    POOL_HEADER = 'Pool ID'

    #: The index for the single molecule design pool ID column.
    MOLECULE_DESIGN_INDEX = 1
    #: The header for the molecule design pool ID column.
    MOLECULE_DESIGN_HEADER = 'Molecule Design ID'

    #: The index for the tube barcode column.
    TUBE_BARCODE_INDEX = 2
    #: The header for the tube barcode column.
    TUBE_BARCODE_HEADER = 'Stock Tube Barcode'

    #: The index for the volume column.
    VOLUME_INDEX = 3
    #: The header for the volume column.
    VOLUME_HEADER = 'Volume (ul)'

    #: The index for the target rack barcode column.
    TARGET_RACK_BARCODE_INDEX = 4
    #: The header for the target rack barcode column.
    TARGET_RACK_BARCODE_HEADER = 'Target Rack Barcode'

    #: The index for the target position column.
    TARGET_POSITION_INDEX = 5
    #: The header for the target position column.
    TARGET_POSITION_HEADER = 'Target Position'


    def __init__(self, stock_sample_creation_layout, executed_worklists, log):
        """
        Constructor:

        :param stock_sample_creation_layout: The working_layout containing the
            molecule design pool data.
        :type stock_sample_creation_layout: :class:`StockSampleCreationLayout`

        :param executed_worklists: The executed worklists that have been
            generated by the executor (mapped onto transfer job indices).
        :type executed_worklists: :class:`dict`

        :param log: The log to write into.
        :type log: :class:`thelma.ThelmaLog`
        """
        CsvWriter.__init__(self, log=log)

        #: The executed worklists that have been generated by the executor
        #: (mapped onto transfer job indices).
        self.executed_worklists = executed_worklists
        #: The working layout containing the molecule design pool data.
        self.stock_sample_creation_layout = stock_sample_creation_layout

        #: Stores the values for the molecule design pool ID column.
        self.__pool_values = None
        #: Stores the values for the single molecule design IDs column.
        self.__md_values = None
        #: Stores the values for the tube barcode column.
        self.__tube_barcode_values = None
        #: Stores the values for the volume column.
        self.__volume_values = None
        #: Stores the values for the target rack barcode column.
        self.__trg_rack_barcode_values = None
        #: Stores the values for the target position column.
        self.__trg_position_values = None

    def reset(self):
        CsvWriter.reset(self)
        self.__pool_values = []
        self.__md_values = []
        self.__tube_barcode_values = []
        self.__volume_values = []
        self.__trg_rack_barcode_values = []
        self.__trg_position_values = []

    def _init_column_map_list(self):
        """
        Creates the :attr:`_column_map_list`
        """
        self.add_info('Start log file generation ...')

        self.__check_input()
        if not self.has_errors(): self.__store_column_values()
        if not self.has_errors(): self.__generate_column_maps()

    def __check_input(self):
        """
        Checks the initialisation values.
        """
        self.add_debug('Check input values ...')

        self._check_input_map_classes('executed worklists map',
                    self.executed_worklists, 'worklist index', int,
                    'executed worklist', ExecutedWorklist)

        self._check_input_class('stock sample creation layout',
                                self.stock_sample_creation_layout,
                                StockSampleCreationLayout)

    def __store_column_values(self):
        """
        Store the values for the columns.
        """
        self.add_debug('Store values ...')

        target_rack_map = dict()
        for ew in self.executed_worklists.values():
            for et in ew.executed_transfers:
                target_rack_barcode = et.target_container.location.rack.barcode
                if not target_rack_map.has_key(target_rack_barcode):
                    target_rack_map[target_rack_barcode] = []
                target_rack_map[target_rack_barcode].append(et)

        barcodes = sorted(target_rack_map.keys())
        well_containers = set()

        for target_rack_barcode in barcodes:
            non_single_md_src_pool = []

            executed_transfers = target_rack_map[target_rack_barcode]
            pool_map = self.__get_sorted_executed_transfers(executed_transfers,
                                                            target_rack_barcode)
            if self.has_errors(): break

            pools = sorted(pool_map.keys(), cmp=lambda p1, p2:
                                            cmp(p1.id, p2.id))
            for pool in pools:
                ets = pool_map[pool]
                for et in ets:
                    self.__pool_values.append(get_trimmed_string(pool.id))
                    volume = et.planned_transfer.volume \
                                                    * VOLUME_CONVERSION_FACTOR
                    self.__volume_values.append(get_trimmed_string(volume))
                    self.__trg_rack_barcode_values.append(target_rack_barcode)
                    trg_label = et.planned_transfer.target_position.label
                    self.__trg_position_values.append(trg_label)

                    src_tube = et.source_container
                    self.__tube_barcode_values.append(src_tube.barcode)
                    md_id = self.__get_molecule_design_id(src_tube)
                    if md_id is None:
                        info = '%s (rack %s)' % (src_tube.barcode,
                                                 target_rack_barcode)
                        non_single_md_src_pool.append(info)
                    else:
                        self.__md_values.append(get_trimmed_string(md_id))

            if len(non_single_md_src_pool) > 0:
                msg = 'Some source container contain more than one ' \
                      'molecule design: %s.' % (sorted(non_single_md_src_pool))
                self.add_error(msg)

        if len(well_containers) > 0:
            well_container_list = list(well_containers)
            well_container_list.sort()
            msg = 'Some source containers in the worklists are wells: %s!' \
                   % (well_container_list)
            self.add_error(msg)

    def __get_sorted_executed_transfers(self, executed_transfers,
                                        target_rack_barcode):
        """
        Sorts the executed transfer of a worklist by molecule design pool ID.
        """
        pool_map = dict()
        no_pools = set()

        for et in executed_transfers:
            rack_pos = et.target_container.location.position
            lib_pos = self.stock_sample_creation_layout.get_working_position(
                                                                    rack_pos)
            if lib_pos is None:
                info = '%s (rack %s)' % (rack_pos.label, target_rack_barcode)
                no_pools.add(info)
                continue
            pool = lib_pos.pool
            add_list_map_element(pool_map, pool, et)

        if len(no_pools) > 0:
            no_pools_list = list(no_pools)
            no_pools_list.sort()
            msg = 'Could not find molecule design pools for the following ' \
                  'target positions: %s.' % (no_pools_list)
            self.add_error(msg)

        return pool_map

    def __get_molecule_design_id(self, tube):
        """
        Returns the molecule design for a single molecule design pool stock
        tube.
        """
        sms = tube.sample.sample_molecules
        if not len(sms) == 1: return None
        sm = sms[0]
        return sm.molecule.molecule_design.id

    def __generate_column_maps(self):
        """
        Initialises the CsvColumnParameters object for the
        :attr:`_column_map_list`.
        """
        pool_column = CsvColumnParameters(self.POOL_INDEX, self.POOL_HEADER,
                    self.__pool_values)
        md_column = CsvColumnParameters(self.MOLECULE_DESIGN_INDEX,
                    self.MOLECULE_DESIGN_HEADER, self.__md_values)
        tube_column = CsvColumnParameters(self.TUBE_BARCODE_INDEX,
                    self.TUBE_BARCODE_HEADER, self.__tube_barcode_values)
        volume_column = CsvColumnParameters(self.VOLUME_INDEX,
                    self.VOLUME_HEADER, self.__volume_values)
        rack_barcode_column = CsvColumnParameters(
                    self.TARGET_RACK_BARCODE_INDEX,
                    self.TARGET_RACK_BARCODE_HEADER,
                    self.__trg_rack_barcode_values)
        rack_position_column = CsvColumnParameters(self.TARGET_POSITION_INDEX,
                    self.TARGET_POSITION_HEADER, self.__trg_position_values)

        self._column_map_list = [pool_column, md_column, tube_column,
                                 volume_column, rack_barcode_column,
                                 rack_position_column]
